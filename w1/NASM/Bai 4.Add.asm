section .data
    num1 db 'num1 = ', 0x0
    lenNum1 equ $ -num1
    num2 db 'num2 = ',0x0
    lenNum2 equ $-num2
    sum db 'Sum = ',0x0
    lenSum equ $-sum
section .bss
    n1 resb 12
    n2 resb 12
    result resb 13
    buffer resb 13
section .text
    global _start
    _start:
        ;output the message 'num1 = '
        mov eax,4
        mov ebx,1 
        mov ecx,num1
        mov edx,lenNum1
        int 80h

        ;Enter number 1 = 
        mov eax,3
        mov ebx,0
        mov ecx,n1
        mov edx,32
        int 80h

        ;output the message 'num2 = '
        mov eax,4
        mov ebx,1 
        mov ecx,num2
        mov edx,lenNum2
        int 80h

        ;Enter number 2 = 
        mov eax,3
        mov ebx,0
        mov ecx,n2
        mov edx,32
        int 80h

        ;output the message 'Sum = '
        mov eax,4
        mov ebx,1 
        mov ecx,sum
        mov edx,lenSum
        int 80h

        ;convert n1 from string to int
        mov edi, n1 ; our string
        call lap
        ;save the value in the result variable
        mov [result],eax
        ;convert n1 from string to int
        mov edi,n2
        call lap
        ;sum 2 number
        add [result],eax
        ;convert sum to string
        mov esi, result
        add esi,10h
        mov eax, [result] 
        mov ecx, 10h
        mov edi , 1h
    L1:
        xor edx, edx
        div ecx
        add edx, 48d ;convert to ascii
        mov [esi], dl
        dec esi
        inc edi
        test eax, eax
        jnz L1
        inc esi
    
        ;print result to the screen
        mov eax,4
        mov ebx,1
        mov ecx,result
        mov edx,13
        int 80h
 
    ;exit code
        mov eax,1
        int 80h
    
    
    lap:
        xor eax, eax ; zero a "result so far"
    _convert:
        movzx ecx, byte [edx] ; get a character 1234
        inc edx ; ready for next one
        cmp ecx, '0' ; valid?
        jb _done
        cmp ecx, '9'
        ja _done
        sub ecx, '0' ; "convert" character to number
        imul eax, 10 ; multiply "result so far" by ten
        add eax, ecx ; add in current digit

        jmp _convert ; until done
    _done:
        ret
    




