.386
.model flat,stdcall
option casemap:none
include C:\masm32\include\kernel32.inc
includelib C:\masm32\lib\kernel32.lib
BufSize = 12
.data 
    	STD_INPUT_HANDLE		dd	-10   ;standard input device
	STD_OUTPUT_HANDLE		dd	-11   ;standard output device
	msg1 db "Enterd num1: ",0
	lenMsg1 dword $-msg1
	msg2 db "Enterd num2: ",0,0
	lenMsg2 dword $-msg2
   	msg3 db "sum: ",0,0
   	lenMsg3 dword $-msg3
	n1 db BufSize DUP(0)
   	n2 db BufSize DUP(0)
   	res db 12 dup(0)
   	sum dd ?
   	hIn dd ?
   	hOut dd ?
   	len_bytes_read dd ?
.code 
	start:
         ;get the handle of the standard output device
         push STD_OUTPUT_HANDLE
         call GetStdHandle
         mov hOut, eax
	 ;print msg1
         push 0
         push lenMsg1
         push offset msg1
         push hOut
         call WriteConsoleA
         ;input
         push STD_INPUT_HANDLE
         call GetStdHandle
         mov hIn, eax
         push 0
         push offset len_bytes_read
         push 12
         push offset n1
         push hIn
         call ReadConsole
	 ;print msg2
         push 0 
         push lenMsg2
         push offset msg2
         push hOut
         call WriteConsoleA
         push 0
         push offset len_bytes_read
         push 12
         push offset n2
         push hIn
         call ReadConsole

         ;convert num1 to int
         mov edi, OFFSET n1
         call lap
         ;add num1 to sum
         mov DWORD PTR [OFFSET sum], eax
         ;convert num2 to int
         mov edi, OFFSET n2
         call lap
         ;add num2 to sum
         add DWORD PTR [OFFSET sum],eax
         ;convert sum to string 
         mov esi, OFFSET res
         add esi, 10d
         mov eax, DWORD PTR [sum] 
         mov ecx, 10d 
         mov edi , 1d
      L1:
         xor edx, edx
         div ecx
         add edx, 48d ;convert to ascii
         mov BYTE PTR [esi], dl
         dec esi
         inc edi
         test eax, eax
         jnz L1
         inc esi
         
         push 0 
         push lenMsg3
         push offset msg3
         push hOut
         call WriteConsoleA
         push 0
         push edi
         push esi
         push hOut
         call WriteConsoleA
         push 0
         call ExitProcess
      lap:
         ; int res = 0
         mov eax, 0              ; Set initial total to 0
      
      convert:
         movzx esi, BYTE PTR [edi]   ; Get the current character
         cmp esi, 0Ah          ; Check for \n
         je done
         test esi, esi           ; Check for end of string 
         je done
         
         cmp esi, 48d             ; Anything less than 0 is invalid
         jl error
               
         cmp esi, 57d             ; Anything greater than 9 is invalid
         jg error
         sub esi, 48d             ; Convert from ASCII to decimal 
         imul eax, 10d            ; Multiply total by 10
         add eax, esi            ; Add current digit to total
               
         inc edi                 ; Get the address of the next character
         jmp convert

      error:
         mov eax, -1d             ; Return -1 on error
      
      done:
         ret     
         
end start