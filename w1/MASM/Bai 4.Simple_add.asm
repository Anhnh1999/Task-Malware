.386
.model flat,stdcall
option casemap:none
include C:\masm32\include\kernel32.inc
include C:\masm32\include\masm32.inc
includelib C:\masm32\lib\kernel32.lib
includelib C:\masm32\lib\masm32.lib
BufSize = 12
.data 
	msg1 db "Enterd num1: ",0
	lenMsg1 dword $-msg1
	msg2 db "Enterd num2: ",0,0
	lenMsg2 dword $-msg2
    msg3 db "sum: ",0,0
    lenMsg3 dword $-msg3
	n1 db BufSize DUP(?)
    n2 db BufSize DUP(?)
    res db 12 dup(0)
    sum dd ?
.code 
	start:
        invoke StdOut, addr msg1
        invoke StdIn, addr n1, 12
        invoke StdOut, addr msg2
        invoke StdIn, addr n2, 12
        ;convert num1 to int
        mov edi, OFFSET n1
        call lap
        ;add num1 to sum
        mov DWORD PTR [OFFSET sum], eax
        ;convert num2 to int
        mov edi, OFFSET n2
        call lap
        ;add num2 to sum
        add DWORD PTR [OFFSET sum],eax
        ;convert sum to string 
        mov esi, OFFSET res
        add esi, 10d
        mov eax, DWORD PTR [sum] 
        mov ecx, 10d 
        mov edi , 1d
    L1:
        xor edx, edx
        div ecx
        add edx, 48d ;convert to ascii
        mov BYTE PTR [esi], dl
        dec esi
        inc edi
        test eax, eax
        jnz L1
        inc esi
        
        invoke StdOut, ADDR msg3
        invoke StdOut, esi
        invoke ExitProcess, 0
    lap:
        ; int res = 0
        mov eax, 0              ; Set initial total to 0
     
    convert:
        movzx esi, BYTE PTR [edi]   ; Get the current character
        cmp esi, 0Ah          ; Check for \n
        je done
        test esi, esi           ; Check for end of string 
        je done
        
        cmp esi, 48d             ; Anything less than 0 is invalid
        jl error
            
        cmp esi, 57d             ; Anything greater than 9 is invalid
        jg error
        sub esi, 48d             ; Convert from ASCII to decimal 
        imul eax, 10d            ; Multiply total by 10
        add eax, esi            ; Add current digit to total
            
        inc edi                 ; Get the address of the next character
        jmp convert

    error:
        mov eax, -1d             ; Return -1 on error
    
    done:
        ret     
		
	end start