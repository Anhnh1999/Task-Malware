%include 'function_x64.asm'
section .data
    msg1 db "Chon phep tinh: ",0xa ,"1.Cong", 0xa, "2.Tru", 0xa, "3.Nhan",0xa,  "5.Thoat",0xa,"> ",0
    msg1_len equ $-msg1
    msg2 db "Nhap so thu nhat: ",0x0
    msg2_len equ $-msg2
    msg3 db "Nhap so thu hai: ",0x0
    msg3_len equ $-msg3
    msg4 db "Ket qua: ",0x0
    msg4_len equ $-msg4
    msg5 db "Phan du: ",0x0
    msg5_len equ $-msg5
    newline db 0xa, 0
 
section .bss
    num1 resb 22
    num2 resb 22
    choice resb 1
    result resq 1
    remainder resq 1
    sign resb 1
 
section .text
    global _start
_start:
    mov rbp, rsp 
menu:
    mov BYTE [sign], 0
    ;print menu
    mov rdi, 1
    mov rsi, msg1
    mov rdx, msg1_len
    mov rax, 1
    syscall
    ;entered selection
    mov rdi, 0
    mov rsi, choice
    mov rdx, 3
    mov rax, 0
    syscall
    mov dl, [choice]
    cmp dl, '5'
    jz exit
    ;enter number1
    mov rdi, 1
    mov rsi, msg2
    mov rdx, msg2_len
    mov rax, 1
    syscall
    mov rdi, 0
    mov rsi, num1
    mov rdx, 22
    mov rax, 0
    syscall
    ;convert num1 to int
    mov rdi, num1
    call atol
    mov r12, rax
    ;enter num2
    mov rdi, 1
    mov rsi, msg3
    mov rdx, msg3_len
    mov rax, 1
    syscall
    mov rdi, 0
    mov rsi, num2
    mov rdx, 22
    mov rax, 0
    syscall
    ;convert num2 to int
    mov rdi, num2
    call atol
    mov r13, rax
    ;select choice
    cmp dl, '1'
    jz .Cong
    cmp dl,'2'
    jz .Tru
    cmp dl, '3'
    jz .Nhan
    cmp dl, '4'
    jz .Chia
    ;jmp menu
.Cong:
    mov rdx, r12
    add rdx, r13
    mov [result], rdx
    jmp printResult
.Tru:
    mov rdx, r12
    sub rdx, r13
    js .negative
    mov [result], rdx
    jmp printResult
.negative:
    mov rdx, r13
    sub rdx, r12
    mov byte [sign], 1
    jmp printResult
   
.Nhan:
    mov rax, r12
    mul r13
    mov [result], rax
    jmp printResult
.Chia:
    mov rax, r12
    xor rdx, rdx
    div r13
    mov [result], rax
    mov [remainder], rdx
    jmp printResult
printResult:
    mov rdi, 1
    mov rsi, msg4
    mov rdx, msg4_len
    mov rax, 1
    syscall
    mov rdi, [result]
    call ltoa
    cmp byte [sign], 1
    jz .negativeResult
    .continue:
        mov rdi, 1
        mov rdx, rax
        call println
    mov dl, [choice]
    cmp dl, '4'
    jz .printRemainder
    jmp menu
.printRemainder:
    mov rdi, 1
    mov rsi, msg5
    mov rdx, msg5_len
    mov rax, 1
    syscall
    mov rdx, [remainder]
    call ltoa
    mov rdi, 1
    mov rdx, rax
    call println
    jmp menu
 
.negativeResult:
    dec rsi
    mov byte [rsi], '-'
    inc rax
    jmp .continue
 
exit:
    mov rdi, 0
    mov rax, 60
    syscall
