%include 'function_x64.asm'
section .data
    msg1 db 'Nhap kich thuoc cua mang n: ',0x0
    msg1_len equ $-msg1
    msg2 db 'Nhap mang: ',0x0
    msg2_len equ $-msg2
    msg3 db 'Tong chan: ',0x0
    msg3_len equ $-msg3
    msg4 db 'Tong le: ',0x0
    msg4_len equ $-msg4

section .bss
    buffer resb 10000
    arrN resd 255
    size_arr resd 1 
    even resq 1
    odd resq 1

section .text
    global _start
    _start:
        mov rbp, rsp
        sub rsp, 8
        ;print  msg1 'Nhap kich thuoc cua mang :'
        mov rdi, 1
        mov rsi, msg1
        mov rdx, msg1_len
        mov rax,1
        syscall
        ;get size of array
        mov rdi, 0
        mov rsi, buffer
        mov rdx, 10
        mov rax, 0
        syscall
        mov rdi, buffer
        call atoi
        mov [size_arr], eax

        ;print msg2: 'Nhap mang: '
        mov rdi, 1
        mov rsi, msg2
        mov rdx, msg2_len
        mov rax, 1
        syscall
        xor rbx, rbx

        ;get element until receives n elements
        .readArr:
            mov rdi, 0
            mov rsi, buffer
            mov rdx, 10000
            mov rax, 0
            syscall
            mov rdi, buffer
            mov r12, arrN
        .getElement:
            push rdi
            call atoi
            mov [r12 + rbx*4], eax
            inc ebx
            cmp [size_arr], ebx
            je .doneGetArray
            pop rdi
        .filter:
            cmp byte [rdi], 0xa
            jz .readArr
            inc rdi
            cmp byte [rdi - 1],0x20
            jz .getElement
            jmp .filter
        .doneGetArray:
            add rsp, 8
            mov rdi, arrN
            mov r8, 0
            mov r9, 0
            mov ebx, 2
            xor ecx, ecx

        lap:
            xor edx, edx
            mov r10d, [rdi]
            mov eax, [rdi]
            div ebx
            cmp edx, 0
            jz .tong_chan
            add r9, r10 
            jmp .next
        .tong_chan:
            add r8, r10
        .next:
            add rdi, 4
            inc ecx
            cmp ecx, [size_arr]
            jnz lap
            ;end loop
        mov [even], r8
        mov [odd], r9

        ;print Even Sum
        mov rdi, 1
        mov rsi, msg3
        mov rdx, msg3_len
        mov rax, 1
        syscall
        mov rdi, [even]
        call ltoa
        mov rdx, rax
        mov rdi, 1
        call println

        ;print Odd Sum
        mov rdi, 1
        mov rsi, msg4
        mov rdx, msg4_len
        mov rax, 1
        syscall
        mov rdi, [odd]
        call ltoa
        mov rdx, rax
        mov rdi, 1
        call println

        mov rdi, 0
        mov rax, 60
        syscall




            



        




            
